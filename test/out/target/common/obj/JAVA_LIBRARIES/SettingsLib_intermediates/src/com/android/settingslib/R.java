/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * aapt tool from the resource data it found.  It
 * should not be modified by hand.
 */

package com.android.settingslib;

public final class R {
    public static final class array {
        /**  Wi-Fi settings. The status messages when the network is unknown. 
         */
        public static int wifi_status=0x7f040000;
        /**  Wi-Fi settings. The status messages when the network is known. 
         */
        public static int wifi_status_with_ssid=0x7f040001;
    }
    public static final class attr {
    }
    public static final class dimen {
        /**  The y translation to apply at the start in appear animations. 
         */
        public static int appear_y_translation_start=0x7f060000;
        /**  The translation for disappearing security views after having solved them. 
         */
        public static int disappear_y_translation=0x7f060001;
    }
    public static final class drawable {
        public static int ic_bt_cellphone=0x7f020000;
        public static int ic_bt_headphones_a2dp=0x7f020001;
        public static int ic_bt_headset_hfp=0x7f020002;
        public static int ic_bt_misc_hid=0x7f020003;
        public static int ic_bt_network_pan=0x7f020004;
        public static int ic_bt_pointing_hid=0x7f020005;
        public static int ic_lockscreen_ime=0x7f020006;
    }
    public static final class string {
        /**  Content description of the WIFI signal when no signal for accessibility (not shown on the screen). [CHAR LIMIT=NONE] 
         */
        public static int accessibility_no_wifi=0x7f05003c;
        /**  Content description of the WIFI signal when WIFI is disabled for accessibility (not shown on the screen). [CHAR LIMIT=NONE] 
         */
        public static int accessibility_wifi_off=0x7f05003b;
        /**  Content description of the WIFI signal when it is one bar for accessibility (not shown on the screen). [CHAR LIMIT=NONE] 
         */
        public static int accessibility_wifi_one_bar=0x7f05003d;
        /**  Content description of the WIFI signal when it is full for accessibility (not shown on the screen). [CHAR LIMIT=NONE] 
         */
        public static int accessibility_wifi_signal_full=0x7f050040;
        /**  Content description of the WIFI signal when it is three bars for accessibility (not shown on the screen). [CHAR LIMIT=NONE] 
         */
        public static int accessibility_wifi_three_bars=0x7f05003f;
        /**  Content description of the WIFI signal when it is two bars for accessibility (not shown on the screen). [CHAR LIMIT=NONE] 
         */
        public static int accessibility_wifi_two_bars=0x7f05003e;
        /**  Status message of Wi-Fi when network has matching passpoint credentials. [CHAR LIMIT=NONE] 
         */
        public static int available_via_passpoint=0x7f05000e;
        /**  Bluetooth settings.  Connection options screen.  The summary for the A2DP checkbox preference when A2DP is connected. 
         */
        public static int bluetooth_a2dp_profile_summary_connected=0x7f050023;
        /**  Bluetooth settings.  Connection options screen.  The summary for the A2DP checkbox preference that describes how checking it will set the A2DP profile as preferred. 
         */
        public static int bluetooth_a2dp_profile_summary_use_for=0x7f05002f;
        /**  Bluetooth settings.  Message when connected to a device. [CHAR LIMIT=40] 
         */
        public static int bluetooth_connected=0x7f050013;
        /**  Bluetooth settings.  Message when connected to a device, except for media audio. [CHAR LIMIT=40] 
         */
        public static int bluetooth_connected_no_a2dp=0x7f050016;
        /**  Bluetooth settings.  Message when connected to a device, except for phone audio. [CHAR LIMIT=40] 
         */
        public static int bluetooth_connected_no_headset=0x7f050015;
        /**  Bluetooth settings.  Message when connected to a device, except for phone/media audio. [CHAR LIMIT=40] 
         */
        public static int bluetooth_connected_no_headset_no_a2dp=0x7f050018;
        /**  Bluetooth settings.  Message when connected to a device, except for map. [CHAR LIMIT=40] 
         */
        public static int bluetooth_connected_no_map=0x7f050017;
        /**  Bluetooth settings.  Message when connecting to a device 
         */
        public static int bluetooth_connecting=0x7f050012;
        /**  Bluetooth settings.  Message when a device is disconnected 
         */
        public static int bluetooth_disconnected=0x7f050010;
        /**  Bluetooth settings.  Message when disconnecting from a device 
         */
        public static int bluetooth_disconnecting=0x7f050011;
        /**  Bluetooth settings.  Connection options screen.  The summary for the headset checkbox preference when headset is connected. 
         */
        public static int bluetooth_headset_profile_summary_connected=0x7f050024;
        /**  Bluetooth settings.  Connection options screen.  The summary for the headset checkbox preference that describes how checking it will set the headset profile as preferred. 
         */
        public static int bluetooth_headset_profile_summary_use_for=0x7f050030;
        /**  Bluetooth settings. Connection options screen. The summary for the HID checkbox preference when HID is connected. 
         */
        public static int bluetooth_hid_profile_summary_connected=0x7f050029;
        /**  Bluetooth settings. Connection options screen. The summary
         for the HID checkbox preference that describes how checking it
         will set the HID profile as preferred. 
         */
        public static int bluetooth_hid_profile_summary_use_for=0x7f050032;
        /**  Bluetooth settings.  Connection options screen.  The summary for the map checkbox preference when map is connected. 
         */
        public static int bluetooth_map_profile_summary_connected=0x7f050026;
        /**  Bluetooth settings. Connection options screen.  The summary for the map checkbox preference that describes how checking it will set the map profile as preferred. 
         */
        public static int bluetooth_map_profile_summary_use_for=0x7f05002d;
        /**  Bluetooth settings.  Connection options screen.  The summary for the OPP checkbox preference when OPP is connected. 
         */
        public static int bluetooth_opp_profile_summary_connected=0x7f050025;
        /**  Bluetooth settings.  Connection options screen.  The summary for the OPP checkbox preference when OPP is not connected. 
         */
        public static int bluetooth_opp_profile_summary_not_connected=0x7f050028;
        /**  Bluetooth settings.  Connection options screen.  The summary for the OPP checkbox preference that describes how checking it will set the OPP profile as preferred. 
         */
        public static int bluetooth_opp_profile_summary_use_for=0x7f050031;
        /** Bluetooth settings screen, summary text under individual Bluetooth devices when pairing 
         */
        public static int bluetooth_pairing=0x7f050014;
        /**  Button text for accepting an incoming pairing request. [CHAR LIMIT=20] 
         */
        public static int bluetooth_pairing_accept=0x7f050033;
        /**  Button text for accepting an incoming pairing request in all caps. [CHAR LIMIT=20] 
         */
        public static int bluetooth_pairing_accept_all_caps=0x7f050034;
        /**  Button text for declining an incoming pairing request. [CHAR LIMIT=20] 
         */
        public static int bluetooth_pairing_decline=0x7f050035;
        /**  Message for the error dialog when BT pairing fails because the other device is down. 
         */
        public static int bluetooth_pairing_device_down_error_message=0x7f050039;
        /**  Message for the error dialog when BT pairing fails generically. 
         */
        public static int bluetooth_pairing_error_message=0x7f050037;
        /**  Message for the error dialog when BT pairing fails because the PIN /
    Passkey entered is incorrect. 
         */
        public static int bluetooth_pairing_pin_error_message=0x7f050038;
        /**  Message for the error dialog when BT pairing fails because the other device rejected the pairing. 
         */
        public static int bluetooth_pairing_rejected_error_message=0x7f05003a;
        /**  Message in pairing dialogs.  [CHAR LIMIT=NONE] 
         */
        public static int bluetooth_pairing_will_share_phonebook=0x7f050036;
        /**  Bluetooth settings. Connection options screen. The summary for the checkbox preference when PAN is connected (NAP role). [CHAR LIMIT=25]
         */
        public static int bluetooth_pan_nap_profile_summary_connected=0x7f05002b;
        /**  Bluetooth settings. Connection options screen. The summary
         for the PAN checkbox preference that describes how checking it
         will set the PAN profile as preferred. 
         */
        public static int bluetooth_pan_profile_summary_use_for=0x7f05002c;
        /**  Bluetooth settings. Connection options screen. The summary for the checkbox preference when PAN is connected (user role). [CHAR LIMIT=25]
         */
        public static int bluetooth_pan_user_profile_summary_connected=0x7f05002a;
        /**  Bluetooth settings.  The user-visible string that is used whenever referring to the A2DP profile. 
         */
        public static int bluetooth_profile_a2dp=0x7f050019;
        /**  Bluetooth settings.  The user-visible string that is used whenever referring to the headset or handsfree profile. 
         */
        public static int bluetooth_profile_headset=0x7f05001a;
        /**  Bluetooth settings. The user-visible string that is used whenever referring to the HID profile. 
         */
        public static int bluetooth_profile_hid=0x7f05001c;
        /**  Bluetooth settings. The user-visible string that is used whenever referring to the map profile. 
         */
        public static int bluetooth_profile_map=0x7f050021;
        /**  Bluetooth settings.  The user-visible string that is used whenever referring to the OPP profile. 
         */
        public static int bluetooth_profile_opp=0x7f05001b;
        /**  Bluetooth settings. The user-visible string that is used whenever referring to the PAN profile (accessing Internet through remote device). [CHAR LIMIT=40] 
         */
        public static int bluetooth_profile_pan=0x7f05001d;
        /**  Bluetooth settings. The user-visible string that is used whenever referring to the PAN profile (sharing this device's Internet connection). [CHAR LIMIT=40] 
         */
        public static int bluetooth_profile_pan_nap=0x7f050020;
        /**  Bluetooth settings. The user-visible string that is used whenever referring to the PBAP profile. [CHAR LIMIT=40] 
         */
        public static int bluetooth_profile_pbap=0x7f05001e;
        /**  Bluetooth settings. The user-visible summary string that is used whenever referring to the PBAP profile (sharing contacts). [CHAR LIMIT=60] 
         */
        public static int bluetooth_profile_pbap_summary=0x7f05001f;
        /**  Bluetooth settings. The user-visible string that is used whenever referring to the SAP profile (sharing SIM card). 
         */
        public static int bluetooth_profile_sap=0x7f050022;
        /**  Bluetooth settings.  Connection options screen.  The summary for the sap checkbox preference when SAP is connected. 
         */
        public static int bluetooth_sap_profile_summary_connected=0x7f050027;
        /**  Bluetooth settings.  Connection options screen.  The summary for the sap checkbox preference that describes how checking it will set the sap profile as preferred. 
         */
        public static int bluetooth_sap_profile_summary_use_for=0x7f05002e;
        /**  Package name for Certinstaller app
         */
        public static int certinstaller_package=0x7f05004f;
        /**  Status message of Wi-Fi when it is connected by Passpoint configuration. [CHAR LIMIT=NONE] 
         */
        public static int connected_via_passpoint=0x7f05000d;
        /**  Status message of Wi-Fi when it is connected by a Wi-Fi assistant application. [CHAR LIMIT=NONE] 
         */
        public static int connected_via_wfa=0x7f05000c;
        /**  Summary for saved networks 
         */
        public static int saved_network=0x7f05000b;
        /**  Package name for Settings app
         */
        public static int settings_package=0x7f05004e;
        /**  Summary for Connected wifi network without internet 
         */
        public static int wifi_connected_no_internet=0x7f05000f;
        /**  Status for networks disabled for unknown reason 
         */
        public static int wifi_disabled_generic=0x7f050005;
        /**  Status for networked disabled from a DNS or DHCP failure 
         */
        public static int wifi_disabled_network_failure=0x7f050006;
        /**  Status for networks disabled from authentication failure (wrong password
         or certificate). 
         */
        public static int wifi_disabled_password_failure=0x7f050008;
        /**  Status for networked disabled from a wifi association failure 
         */
        public static int wifi_disabled_wifi_failure=0x7f050007;
        /**  Toast message when Wi-Fi cannot scan for networks 
         */
        public static int wifi_fail_to_scan=0x7f050002;
        /**  Summary for the remembered network but no internet connection was detected. 
         */
        public static int wifi_no_internet=0x7f05000a;
        /**  Summary for the remembered network but currently not in range. 
         */
        public static int wifi_not_in_range=0x7f050009;
        /**  Summary for the remembered network. 
         */
        public static int wifi_remembered=0x7f050004;
        /**  Do not translate.  Concise terminology for wifi with 802.1x EAP security 
         */
        public static int wifi_security_eap=0x7f05004c;
        /**  Used in Wi-Fi settings dialogs when Wi-Fi does not have any security. 
         */
        public static int wifi_security_none=0x7f050003;
        /**  Do not translate.  Concise terminology for Passpoint network 
         */
        public static int wifi_security_passpoint=0x7f05004d;
        /**  Do not translate.  Terminology for wifi with unknown PSK type 
         */
        public static int wifi_security_psk_generic=0x7f05004b;
        /**  Do not translate.  Concise terminology for wifi with 802.1x EAP security 
         */
        public static int wifi_security_short_eap=0x7f050046;
        /**  Do not translate.  Concise terminology for wifi with unknown PSK type 
         */
        public static int wifi_security_short_psk_generic=0x7f050045;
        /**  Do not translate.  Concise terminology for wifi with WEP security 
         */
        public static int wifi_security_short_wep=0x7f050041;
        /**  Do not translate.  Concise terminology for wifi with WPA security 
         */
        public static int wifi_security_short_wpa=0x7f050042;
        /**  Do not translate.  Concise terminology for wifi with WPA2 security 
         */
        public static int wifi_security_short_wpa2=0x7f050043;
        /**  Do not translate.  Concise terminology for wifi with both WPA/WPA2 security 
         */
        public static int wifi_security_short_wpa_wpa2=0x7f050044;
        public static int wifi_security_wapi_certificate=0x7f050001;
        public static int wifi_security_wapi_psk=0x7f050000;
        /**  Do not translate.  Terminology for wifi with WEP security 
         */
        public static int wifi_security_wep=0x7f050047;
        /**  Do not translate.  Terminology for wifi with WPA security 
         */
        public static int wifi_security_wpa=0x7f050048;
        /**  Do not translate.  Terminology for wifi with WPA2 security 
         */
        public static int wifi_security_wpa2=0x7f050049;
        /**  Do not translate.  Terminology for wifi with both WPA/WPA2 security, or unknown 
         */
        public static int wifi_security_wpa_wpa2=0x7f05004a;
    }
    public static final class xml {
        public static int timezones=0x7f030000;
    }
}
