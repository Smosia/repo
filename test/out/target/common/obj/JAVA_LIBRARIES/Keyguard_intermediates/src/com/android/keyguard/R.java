/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * aapt tool from the resource data it found.  It
 * should not be modified by hand.
 */

package com.android.keyguard;

public final class R {
    public static final class array {
        public static int dismiss_descriptions=0x7f040004;
        public static int dismiss_direction_descriptions=0x7f040005;
        public static int dismiss_drawables=0x7f040003;
        /**  list of 3- or 4-letter mnemonics for a 10-key numeric keypad 
 9 
         */
        public static int lockscreen_num_pad_klondike=0x7f040006;
        public static int snooze_dismiss_descriptions=0x7f040001;
        public static int snooze_dismiss_direction_descriptions=0x7f040002;
        public static int snooze_dismiss_drawables=0x7f040000;
    }
    public static final class attr {
        /** <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static int allCaps=0x7f010014;
        /**  Determine whether the glow pad is allowed to scale to fit the bounds indicated
            by its parent. If this is set to false, no scaling will occur. If this is set to true
            scaling will occur to fit for any axis in which gravity is set to center. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static int allowScaling=0x7f01000e;
        /**  Used when the handle shouldn't wait to be hit before following the finger 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static int alwaysTrackFinger=0x7f01000d;
        /** <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static int digit=0x7f010011;
        /**  Reference to an array resource that be used to announce the directions with targets around the circle. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static int directionDescriptions=0x7f010003;
        /**  Number of waves/chevrons to show in animation. 
         <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static int feedbackCount=0x7f01000c;
        /**  Size of target radius. Points within this distance of target center is a "hit". 

        <attr name="hitRadius" format="dimension"/>
        
 Radius of glow under finger. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static int glowRadius=0x7f010009;
        /**  Sets a drawable as the center. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static int handleDrawable=0x7f010004;
        /**  Inner radius of glow area. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static int innerRadius=0x7f010007;
        /** <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static int layout_maxHeight=0x7f010010;
        /** <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static int layout_maxWidth=0x7f01000f;
        /** <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static int locateAtNonSecureView=0x7f010000;
        /**  Outer radius of glow area. Target icons will be drawn on this circle. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static int outerRadius=0x7f010008;
        /**  Drawable to use for wave ripple animation. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static int outerRingDrawable=0x7f010005;
        /**  Drawble used for drawing points 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static int pointDrawable=0x7f010006;
        /** <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static int scaledTextSize=0x7f010013;
        /**  How close we need to be before snapping to a target. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static int snapMargin=0x7f01000b;
        /**  Reference to an array resource that be used as description for the targets around the circle. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static int targetDescriptions=0x7f010002;
        /**  Reference to an array resource that be shown as targets around a circle. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static int targetDrawables=0x7f010001;
        /** <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static int textView=0x7f010012;
        /**  Tactile feedback duration for actions. Set to '0' for no vibration. 
         <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static int vibrationDuration=0x7f01000a;
    }
    public static final class bool {
        /**  Allow the menu hard key to be disabled in LockScreen on some devices [DO NOT TRANSLATE] 
         */
        public static int config_disableMenuKeyInLockScreen=0x7f060006;
        /**  Alias used to reference framework configuration for screen rotation.  
         */
        public static int config_enableLockScreenRotation=0x7f060001;
        /**  Alias used to reference framework configuration for translucent decor.  
         */
        public static int config_enableLockScreenTranslucentDecor=0x7f060002;
        public static int config_useCondensedSongInfoLayout=0x7f060000;
        public static int kg_show_ime_at_screen_on=0x7f060003;
        public static int kg_sim_puk_account_full_screen=0x7f060005;
        /**  Carriers in this locale are sensitive to capitalization of carrier text. 
         This makes the entire interface consistent by switching back to normal case. 
 Carriers in this locale are sensitive to capitalization of carrier text. 
         This makes the entire interface consistent by switching back to normal case. 
 Carriers in this locale are sensitive to capitalization of carrier text. 
         This makes the entire interface consistent by switching back to normal case. 
         */
        public static int kg_use_all_caps=0x7f060004;
    }
    public static final class color {
        public static int clock_gray=0x7f090002;
        /**  Clock 
         */
        public static int clock_white=0x7f090001;
        /**  Alias used to reference framework color for transparency. 
         */
        public static int transparent=0x7f090000;
    }
    public static final class dimen {
        /**  The y translation to apply at the start in appear animations. 
         */
        public static int appear_y_translation_start=0x7f070046;
        public static int big_font_size=0x7f07002b;
        public static int blade_font_size=0x7f070003;
        public static int blade_indicator_height=0x7f070002;
        /**  Dimemsions for BladeView. 
         */
        public static int blade_indicator_width=0x7f070001;
        public static int blade_prompt_horz_offset=0x7f070006;
        public static int blade_prompt_vert_offset=0x7f070005;
        public static int blade_prompt_width=0x7f070004;
        public static int body_font_padding=0x7f070038;
        public static int body_font_size=0x7f070037;
        /**  The height of gallery image on the hdpi Device 
         */
        public static int bookmark_bitmap_height=0x7f07001a;
        /**  The width of gallery image on the hdpi Device 
         */
        public static int bookmark_bitmap_width=0x7f070019;
        /**  The gap between two adjacent dot 
         */
        public static int bookmark_dot_gap=0x7f070017;
        /**  The CoverFlow space 
         */
        public static int bookmark_spacing=0x7f070018;
        /**  Dimemsions for BookmarkWidget. 
         */
        public static int bookmarkwidget_anim_height=0x7f070015;
        /**  Default clock parameters 
         */
        public static int bottom_text_spacing_digital=0x7f070043;
        public static int button_font_size=0x7f070039;
        /**  Dimemsions for ContactWidget. 
         */
        public static int contactwidget_anim_height=0x7f070016;
        /**  The vertical margin between the date and the owner info. 
         */
        public static int date_owner_info_margin=0x7f070049;
        public static int dialog_button_font_size=0x7f07003b;
        /**  The translation for disappearing security views after having solved them. 
         */
        public static int disappear_y_translation=0x7f07004a;
        /**  EmergencyCarrierArea overlap - amount to overlap the emergency button and carrier text.
         Should be 0 on devices with plenty of room (e.g. tablets) 
 EmergencyCarrierArea overlap - amount to overlap the emergency button and carrier text.
         Should be 0 on devices with plenty of room (e.g. tablets) 
         */
        public static int eca_overlap=0x7f070042;
        /**  Default glow radius for GlowPadView 
         */
        public static int glowpadview_glow_radius=0x7f070031;
        /**  Default distance from each snap target that GlowPadView considers a "hit" 
         */
        public static int glowpadview_inner_radius=0x7f07002f;
        /**  Default glow radius for GlowPadView 
         */
        public static int glowpadview_margin_bottom=0x7f07002c;
        public static int glowpadview_margin_right=0x7f07002d;
        /**  Size of alarm alert outer ring. 
         */
        public static int glowpadview_outerring_diameter=0x7f070032;
        /**  Default distance beyond which GlowPadView snaps to the matching target 
         */
        public static int glowpadview_snap_margin=0x7f070030;
        /**  Default target placement radius for GlowPadView. Should be 1/2 of outerring diameter. 
         */
        public static int glowpadview_target_placement_radius=0x7f07002e;
        public static int header_font_size=0x7f070036;
        /**  Height of the sliding KeyguardSecurityContainer (includes 2x keyguard_security_view_margin) 
 Height of the sliding KeyguardSecurityContainer (includes 2x keyguard_security_view_margin) 
 Height of the sliding KeyguardSecurityContainer (includes 2x
         keyguard_security_view_margin) 
 Height of the sliding KeyguardSecurityContainer
        (includes 2x keyguard_security_view_margin) 
 Height of the sliding KeyguardSecurityContainer (includes 2x keyguard_security_view_margin) 
         */
        public static int keyguard_security_height=0x7f07003f;
        /**  Max Height of the sliding KeyguardSecurityContainer (includes 2x keyguard_security_view_margin) 
 Max Height of the sliding KeyguardSecurityContainer (includes 2x keyguard_security_view_margin) 
         */
        public static int keyguard_security_max_height=0x7f070040;
        /**  Margin around the various security views 
 Margin around the various security views 
         */
        public static int keyguard_security_view_margin=0x7f070041;
        /**  Width of the sliding KeyguardSecurityContainer (includes 2x keyguard_security_view_margin) 
 Width of the sliding KeyguardSecurityContainer (includes 2x keyguard_security_view_margin) 
 Width of the sliding KeyguardSecurityContainer (includes 2x keyguard_security_view_margin) 
         */
        public static int keyguard_security_width=0x7f07003e;
        /**  Power off alarm end
 on phones, the keyguard widget may be too small to be cut.
       Set a minimum height and reduce the challenge container height 
         */
        public static int keyguard_small_widget_height_for_phone=0x7f07003c;
        /**  For keyguard, dual clock 
         */
        public static int kg_status_clock_ampm_font_size=0x7f07001d;
        public static int kg_status_clock_font_size=0x7f07001e;
        public static int kg_status_dual_first_clock_ampm_font_size=0x7f070020;
        public static int kg_status_dual_first_clock_time_font_size=0x7f07001f;
        public static int kg_status_dual_second_clock_ampm_font_size=0x7f070022;
        public static int kg_status_dual_second_clock_localweekday_font_size=0x7f070023;
        public static int kg_status_dual_second_clock_time_font_size=0x7f070021;
        /**  Size of the generic status lines keyguard's status view  
 Size of the generic status lines keyguard's status view  
         */
        public static int kg_status_line_font_size=0x7f07003d;
        public static int label_font_size=0x7f07002a;
        /**  Power-off alarm start 
         */
        public static int label_margin_big=0x7f070024;
        public static int label_margin_small=0x7f070025;
        public static int medium_font_size=0x7f070034;
        public static int mmswidget_setting_anim_height=0x7f07000c;
        /**  Dimemsions for MMSWidget. 
         */
        public static int mmswidget_utils_hight=0x7f070007;
        public static int mmswidget_utils_photo_inner_paddingleft=0x7f07000a;
        public static int mmswidget_utils_photo_inner_paddingtop=0x7f07000b;
        public static int mmswidget_utils_photo_outer_padding=0x7f070009;
        public static int mmswidget_utils_width=0x7f070008;
        public static int mmswidget_view_dynamic_p0dy=0x7f070011;
        public static int mmswidget_view_dynamic_p2dy=0x7f070012;
        public static int mmswidget_view_dynamic_p3dy=0x7f070013;
        public static int mmswidget_view_dynamic_p4dy=0x7f070014;
        public static int mmswidget_view_static_p0dy=0x7f07000d;
        public static int mmswidget_view_static_p2dy=0x7f07000e;
        public static int mmswidget_view_static_p3dy=0x7f07000f;
        public static int mmswidget_view_static_p4dy=0x7f070010;
        /**  The padding between chars of the password view. 
         */
        public static int password_char_padding=0x7f070048;
        /**  The size of the dots in the PIN unlock method. 
         */
        public static int password_dot_size=0x7f070047;
        /**  for SearchDialog. 
         */
        public static int search_dialog_searen_engine_item=0x7f070000;
        /**  For keyguard, sim card info text max width in SIm card changed dialog 
         */
        public static int sim_card_infotext_maxwidth=0x7f07001c;
        /**  For keyguard, sim card name padding in SIMPinUnlock and SIm card changed dialog 
         */
        public static int sim_card_name_padding=0x7f07001b;
        public static int small_font_size=0x7f070033;
        public static int time_margin_bottom=0x7f070028;
        public static int time_margin_left=0x7f070027;
        public static int time_margin_right=0x7f070026;
        public static int time_margin_top=0x7f070029;
        public static int timer_label_font_size=0x7f07003a;
        /**  Overload default clock widget parameters 
 Overload default clock widget parameters 
         */
        public static int widget_big_font_size=0x7f070045;
        public static int widget_label_font_size=0x7f070044;
        public static int widget_medium_font_size=0x7f070035;
    }
    public static final class drawable {
        public static int ic_access_alarms_big=0x7f020000;
        public static int ic_backspace_24dp=0x7f020001;
        public static int ic_done_wht=0x7f020002;
        public static int ic_lockscreen_ime=0x7f020003;
        public static int ic_lockscreen_sim=0x7f020004;
        public static int kg_security_lock_normal=0x7f020005;
        public static int mtk_ic_alarm_alert_dismiss_pwroff=0x7f020006;
        public static int mtk_ic_alarm_alert_dismiss_pwron=0x7f020007;
        public static int mtk_ic_alarm_alert_outerring=0x7f020008;
        public static int mtk_ic_alarm_alert_snooze=0x7f020009;
        public static int mtk_ic_alarm_alert_touch_handle=0x7f02000a;
        public static int mtk_ic_lockscreen_alarm=0x7f02000b;
        public static int mtk_ic_lockscreen_glowdot=0x7f02000c;
        public static int mtk_ic_lockscreen_handle_pressed=0x7f02000d;
        public static int mtk_ic_lockscreen_poweroff_activated=0x7f02000e;
        public static int mtk_ic_lockscreen_poweroff_normal=0x7f02000f;
        public static int mtk_ic_lockscreen_poweron_activated=0x7f020010;
        public static int mtk_ic_lockscreen_poweron_normal=0x7f020011;
        public static int mtk_ic_lockscreen_snooze_activated=0x7f020012;
        public static int mtk_ic_lockscreen_snooze_normal=0x7f020013;
        public static int mtk_ic_voice_unlock_cancel=0x7f020014;
        public static int mtk_ic_voice_unlock_microphone=0x7f020015;
        public static int mtk_stat_voice=0x7f020016;
        public static int mtk_voice_wave=0x7f020017;
        public static int mtk_voice_wave_0=0x7f020018;
        public static int mtk_voice_wave_1=0x7f020019;
        public static int mtk_voice_wave_2=0x7f02001a;
        public static int mtk_voice_wave_3=0x7f02001b;
        public static int mtk_voice_wave_4=0x7f02001c;
        public static int mtk_voice_wave_anim=0x7f02001d;
        public static int ripple_drawable=0x7f02001e;
    }
    public static final class id {
        public static int ScrollView01=0x7f0c0049;
        public static int alarm_status=0x7f0c0033;
        public static int alertTitle=0x7f0c0042;
        public static int am_pm=0x7f0c0027;
        public static int antiTheftPinEntry=0x7f0c003c;
        public static int carrier=0x7f0c003a;
        public static int carrier_text=0x7f0c0000;
        public static int clock=0x7f0c0024;
        public static int clock_container=0x7f0c0038;
        public static int clock_text=0x7f0c0026;
        public static int clock_view=0x7f0c0025;
        public static int container=0x7f0c000d;
        public static int data=0x7f0c0059;
        public static int data_opr=0x7f0c005a;
        public static int date_view=0x7f0c0032;
        public static int delete_button=0x7f0c0012;
        public static int digit_text=0x7f0c0006;
        public static int digitalClock=0x7f0c0043;
        public static int divider=0x7f0c0013;
        public static int emergency_call_button=0x7f0c0001;
        public static int first_sim_name=0x7f0c004b;
        public static int for_text=0x7f0c002b;
        public static int fourth_sim_name=0x7f0c004e;
        public static int glow_pad_view=0x7f0c0048;
        public static int key0=0x7f0c0021;
        public static int key1=0x7f0c0015;
        public static int key10=0x7f0c0062;
        public static int key11=0x7f0c0061;
        public static int key2=0x7f0c0016;
        public static int key3=0x7f0c0017;
        public static int key4=0x7f0c0019;
        public static int key5=0x7f0c001a;
        public static int key6=0x7f0c001b;
        public static int key7=0x7f0c001d;
        public static int key8=0x7f0c001e;
        public static int key9=0x7f0c001f;
        public static int key_dismiss=0x7f0c0040;
        public static int key_enter=0x7f0c0022;
        public static int keyguard_antitheft_lock_view=0x7f0c003b;
        public static int keyguard_bouncer_frame=0x7f0c002e;
        public static int keyguard_clock_container=0x7f0c0035;
        public static int keyguard_host_view=0x7f0c0002;
        public static int keyguard_me_view=0x7f0c0060;
        public static int keyguard_message_area=0x7f0c0005;
        public static int keyguard_password_view=0x7f0c0008;
        public static int keyguard_pattern_view=0x7f0c000c;
        public static int keyguard_pin_view=0x7f0c000f;
        public static int keyguard_security_container=0x7f0c0003;
        public static int keyguard_selector_fade_container=0x7f0c000b;
        public static int keyguard_sim=0x7f0c0029;
        public static int keyguard_sim_pin_puk_me_view=0x7f0c003d;
        public static int keyguard_sim_pin_view=0x7f0c0028;
        public static int keyguard_sim_puk_view=0x7f0c0030;
        public static int keyguard_status_area_id=0x7f0c0039;
        public static int keyguard_status_view=0x7f0c0034;
        public static int klondike_text=0x7f0c0007;
        public static int lockPatternView=0x7f0c000e;
        public static int mtk_keyguard_clock_container=0x7f0c0037;
        public static int owner_info=0x7f0c0036;
        public static int passwordEntry=0x7f0c0009;
        public static int pinEntry=0x7f0c0011;
        public static int power_off_alarm_view=0x7f0c0041;
        public static int presentation=0x7f0c0023;
        public static int prompt=0x7f0c004a;
        public static int pukEntry=0x7f0c0031;
        public static int row0=0x7f0c0010;
        public static int row1=0x7f0c0014;
        public static int row2=0x7f0c0018;
        public static int row3=0x7f0c001c;
        public static int row4=0x7f0c0020;
        public static int second_sim_name=0x7f0c004c;
        public static int simPinEntry=0x7f0c002f;
        public static int simPinPukMeEntry=0x7f0c003f;
        public static int sim_card_name=0x7f0c002d;
        public static int sim_info_message=0x7f0c002a;
        public static int sim_setting_prompt=0x7f0c004f;
        public static int slot_num_text=0x7f0c003e;
        public static int sms=0x7f0c0057;
        public static int sms_item=0x7f0c0056;
        public static int sms_opr=0x7f0c0058;
        public static int sub_icon=0x7f0c002c;
        public static int switch_ime_button=0x7f0c000a;
        public static int third_sim_name=0x7f0c004d;
        public static int timeDisplayHours=0x7f0c0044;
        public static int timeDisplayMinutes=0x7f0c0045;
        public static int tips=0x7f0c0047;
        public static int tips_container=0x7f0c0046;
        public static int video_call=0x7f0c0054;
        public static int video_call_item=0x7f0c0053;
        public static int video_call_opr=0x7f0c0055;
        public static int view_flipper=0x7f0c0004;
        public static int voiceLockCancel=0x7f0c005f;
        public static int voiceLockMic=0x7f0c005d;
        public static int voiceLockWave=0x7f0c005e;
        public static int voice_call=0x7f0c0051;
        public static int voice_call_item=0x7f0c0050;
        public static int voice_call_opr=0x7f0c0052;
        public static int voice_unlock_area_view=0x7f0c005c;
        public static int voice_unlock_view=0x7f0c005b;
    }
    public static final class integer {
        /**  Alias used to reference framework activity duration.  
         */
        public static int config_activityDefaultDur=0x7f0a0000;
        /**  Gravity to make KeyguardSelectorView work in multiple orientations
        0x31 == "top|center_horizontal" 
 Gravity to make KeyguardSelectorView work in multiple orientations
        0x13 == "left|center_vertical" 
         */
        public static int kg_selector_gravity=0x7f0a0001;
    }
    public static final class layout {
        public static int keyguard_bouncer=0x7f030000;
        /**  Alias used to reference one of two possible layouts in keyguard.  
 Alias used to reference one of two possible layouts in keyguard.  
         */
        public static int keyguard_eca=0x7f030016;
        public static int keyguard_emergency_carrier_area=0x7f030001;
        public static int keyguard_host_view=0x7f030002;
        public static int keyguard_message_area=0x7f030003;
        public static int keyguard_message_area_large=0x7f030004;
        public static int keyguard_num_pad_key=0x7f030005;
        public static int keyguard_password_view=0x7f030006;
        public static int keyguard_pattern_view=0x7f030007;
        public static int keyguard_pin_view=0x7f030008;
        public static int keyguard_presentation=0x7f030009;
        public static int keyguard_sim_pin_view=0x7f03000a;
        public static int keyguard_sim_puk_view=0x7f03000b;
        public static int keyguard_status_area=0x7f03000c;
        public static int keyguard_status_view=0x7f03000d;
        public static int mtk_carrier_view=0x7f03000e;
        public static int mtk_keyguard_anti_theft_lock_view=0x7f03000f;
        public static int mtk_keyguard_sim_pin_puk_me_view=0x7f030010;
        public static int mtk_power_off_alarm_view=0x7f030011;
        public static int mtk_prompt=0x7f030012;
        public static int mtk_voice_unlock_view=0x7f030013;
        public static int rgk_keyguard_2d1_me_view=0x7f030014;
        public static int rgk_keyguard_sim_pin_puk_me_view=0x7f030015;
    }
    public static final class plurals {
        /**  Instructions telling the user that they entered the wrong SIM PIN while trying
         to unlock the keyguard.  Displayed in a dialog box.  
         */
        public static int kg_password_wrong_pin_code=0x7f0b0000;
        /**  Instructions telling the user that they entered the wrong puk while trying
         to unlock the keyguard.  Displayed in a dialog box.  
         */
        public static int kg_password_wrong_puk_code=0x7f0b0001;
        /**  An explanation text that the password needs to be entered since it hasn't been entered in a while. [CHAR LIMIT=80]
         */
        public static int kg_prompt_reason_time_password=0x7f0b0004;
        /**  An explanation text that the pattern needs to be solved since it hasn't been solved in a while. [CHAR LIMIT=80]
         */
        public static int kg_prompt_reason_time_pattern=0x7f0b0002;
        /**  An explanation text that the pin needs to be entered since it hasn't been entered in a while. [CHAR LIMIT=80]
         */
        public static int kg_prompt_reason_time_pin=0x7f0b0003;
    }
    public static final class string {
        /**  Skeleton string format for displaying the date. 
         */
        public static int abbrev_wday_month_day_no_year=0x7f05004c;
        /**  Skeleton string format for displaying the date when an alarm is set. 
         */
        public static int abbrev_wday_month_day_no_year_alarm=0x7f05004d;
        /**  Content description of the switch input method button for accessibility (not shown on the screen). [CHAR LIMIT=NONE] 
         */
        public static int accessibility_ime_switch_button=0x7f050098;
        /**  Description of airplane mode 
         */
        public static int airplane_mode=0x7f050099;
        public static int alarm_alert_dismiss_text=0x7f05000d;
        public static int alarm_alert_snooze_text=0x7f05000e;
        /**  App label in the manifest  
         */
        public static int app_name=0x7f050050;
        public static int change_setting_for_onenewsim=0x7f05001e;
        public static int change_setting_for_twonewsim=0x7f05001f;
        public static int change_settings=0x7f050022;
        /**  Skeleton string format for displaying the time in 12-hour format. 
         */
        public static int clock_12hr_format=0x7f05004e;
        /**  Skeleton string format for displaying the time in 24-hour format. 
         */
        public static int clock_24hr_format=0x7f05004f;
        public static int day_concat=0x7f050004;
        public static int default_label=0x7f050005;
        public static int default_sim_setting_prompt=0x7f05002d;
        /**  Description of the left direction in which one can to slide the handle in the Slide unlock screen. [CHAR LIMIT=NONE] 
 Misc 
 Misc 
         */
        public static int description_direction_left=0x7f05000f;
        /**  Description of the right direction in which one can to slide the handle in the Slide unlock screen. [CHAR LIMIT=NONE] 
         */
        public static int description_direction_right=0x7f050010;
        public static int dismiss=0x7f050026;
        /**  DM Lock 
 DM Lock 
 DM Lock 
 DM Lock 
 DM Lock 
 DM Lock 
 DM Lock 
 DM Lock 
 DM Lock 
 DM Lock 
 DM Lock 
 DM Lock 
 DM Lock 
 DM Lock 
 DM Lock 
 DM Lock 
 DM Lock 
 DM Lock 
 DM Lock 
 DM Lock 
 DM Lock 
 DM Lock 
 DM Lock 
 DM Lock 
 DM Lock 
 DM Lock 
 DM Lock 
 DM Lock 
 DM Lock 
 DM Lock 
 DM Lock 
 DM Lock 
 DM Lock 
 DM Lock 
 DM Lock 
 DM Lock 
 DM Lock 
 DM Lock 
 DM Lock 
 DM Lock 
 DM Lock 
 DM Lock 
 DM Lock 
         */
        public static int dm_prompt=0x7f05003f;
        /**  GlowPadView 
 PowerOffAlarm 
 GlowPadView 
 PowerOffAlarm 
 GlowPadView 
 PowerOffAlarm 
 GlowPadView 
 PowerOffAlarm 
 GlowPadView 
 PowerOffAlarm 
 GlowPadView 
 PowerOffAlarm 
 GlowPadView 
 PowerOffAlarm 
 GlowPadView 
 PowerOffAlarm 
 GlowPadView 
 PowerOffAlarm 
 GlowPadView 
 PowerOffAlarm 
 GlowPadView 
 PowerOffAlarm 
 GlowPadView 
 PowerOffAlarm 
 GlowPadView 
 PowerOffAlarm 
 GlowPadView 
 PowerOffAlarm 
 GlowPadView 
 PowerOffAlarm 
 GlowPadView 
 PowerOffAlarm 
 GlowPadView 
 PowerOffAlarm 
 GlowPadView 
 PowerOffAlarm 
 GlowPadView 
 PowerOffAlarm 
 GlowPadView 
 PowerOffAlarm 
 GlowPadView 
 PowerOffAlarm 
 GlowPadView 
 PowerOffAlarm 
 GlowPadView 
 PowerOffAlarm 
 GlowPadView 
 PowerOffAlarm 
 GlowPadView 
 PowerOffAlarm 
 GlowPadView 
 PowerOffAlarm 
 GlowPadView 
 PowerOffAlarm 
 GlowPadView 
 PowerOffAlarm 
 GlowPadView 
 PowerOffAlarm 
 GlowPadView 
 PowerOffAlarm 
 GlowPadView 
 PowerOffAlarm 
 GlowPadView 
 PowerOffAlarm 
 GlowPadView 
 PowerOffAlarm 
 GlowPadView 
 PowerOffAlarm 
 GlowPadView 
 PowerOffAlarm 
 GlowPadView 
 PowerOffAlarm 
 GlowPadView 
 PowerOffAlarm 
 GlowPadView 
 PowerOffAlarm 
 GlowPadView 
 PowerOffAlarm 
 GlowPadView 
 PowerOffAlarm 
 GlowPadView 
 PowerOffAlarm 
 GlowPadView 
 PowerOffAlarm 
 GlowPadView 
 PowerOffAlarm 
         */
        public static int every_day=0x7f050002;
        /**  Fingerprint hint message when finger was not recognized.
         */
        public static int fingerprint_not_recognized=0x7f0500a3;
        public static int invalidPuk=0x7f050013;
        public static int invalid_sim_message=0x7f050031;
        public static int invalid_sim_title=0x7f050030;
        /**  Description of the Delete button in a KeyboardView. [CHAR LIMIT=NONE] 
         */
        public static int keyboardview_keycode_delete=0x7f050072;
        /**  Description of the Enter button in a KeyboardView. [CHAR LIMIT=NONE] 
         */
        public static int keyboardview_keycode_enter=0x7f050073;
        public static int keyguard_accessibility_alarm_unlock=0x7f05000c;
        /**  Accessibility description for the text view that indicates when the next alarm is set (not shown on screen). [CHAR_LIMIT=none] 
         */
        public static int keyguard_accessibility_next_alarm=0x7f050071;
        /**  Accessibility description of the password lock. [CHAR_LIMIT=none] 
         */
        public static int keyguard_accessibility_password_unlock=0x7f05006b;
        /**  Accessibility description of the unlock pattern area. [CHAR_LIMIT=none] 
         */
        public static int keyguard_accessibility_pattern_area=0x7f05006c;
        public static int keyguard_accessibility_pattern_unlock=0x7f050069;
        /**  Accessibility description of the PIN password view. [CHAR_LIMIT=none] 
         */
        public static int keyguard_accessibility_pin_area=0x7f05006e;
        /**  Accessibility description of the pin lock. [CHAR_LIMIT=none] 
         */
        public static int keyguard_accessibility_pin_unlock=0x7f05006a;
        /**  Accessibility description of the SIM PIN password view. [CHAR_LIMIT=none] 
         */
        public static int keyguard_accessibility_sim_pin_area=0x7f05006f;
        /**  Accessibility description of the SIM PUK password view. [CHAR_LIMIT=none] 
         */
        public static int keyguard_accessibility_sim_puk_area=0x7f050070;
        /**  Accessibility description of the unlock slide area. [CHAR_LIMIT=none] 
         */
        public static int keyguard_accessibility_slide_area=0x7f05006d;
        /**  UnreadEvent 
 Utils 
 UnreadEvent 
 Utils 
 UnreadEvent 
 Utils 
 UnreadEvent 
 Utils 
 UnreadEvent 
 Utils 
 UnreadEvent 
 Utils 
 UnreadEvent 
 Utils 
 UnreadEvent 
 Utils 
 UnreadEvent 
 Utils 
 UnreadEvent 
 Utils 
 UnreadEvent 
 Utils 
 UnreadEvent 
 Utils 
 UnreadEvent 
 Utils 
 UnreadEvent 
 Utils 
 UnreadEvent 
 Utils 
 UnreadEvent 
 Utils 
 UnreadEvent 
 Utils 
 UnreadEvent 
 Utils 
 UnreadEvent 
 Utils 
 UnreadEvent 
 Utils 
 UnreadEvent 
 Utils 
 UnreadEvent 
 Utils 
 UnreadEvent 
 Utils 
 UnreadEvent 
 Utils 
 UnreadEvent 
 Utils 
 UnreadEvent 
 Utils 
 UnreadEvent 
 Utils 
 UnreadEvent 
 Utils 
 UnreadEvent 
 Utils 
 UnreadEvent 
 Utils 
 UnreadEvent 
 Utils 
 UnreadEvent 
 Utils 
 UnreadEvent 
 Utils 
 UnreadEvent 
 Utils 
 UnreadEvent 
 Utils 
 UnreadEvent 
 Utils 
 UnreadEvent 
 Utils 
 UnreadEvent 
 Utils 
 UnreadEvent 
 Utils 
 UnreadEvent 
 Utils 
 UnreadEvent 
 Utils 
 UnreadEvent 
 Utils 
 UnreadEvent 
 Utils 
         */
        public static int keyguard_alwaysask=0x7f050033;
        /**  On the keyguard screen, it shows the carrier the phone is connected to.
        This is displayed if the phone is not connected to a carrier.
         */
        public static int keyguard_carrier_default=0x7f050097;
        /**  When the lock screen is showing, the phone is plugged in and the battery is fully
         charged, say that it is charged. 
         */
        public static int keyguard_charged=0x7f050059;
        public static int keyguard_close=0x7f05002c;
        public static int keyguard_code_donnot_mismatch=0x7f050029;
        public static int keyguard_code_length_prompt=0x7f050028;
        public static int keyguard_data=0x7f050025;
        public static int keyguard_data_none=0x7f050034;
        /**  Clock 
 Clock 
 Clock 
 Clock 
 Clock 
 Clock 
 Clock 
 Clock 
 Clock 
 Clock 
 Clock 
 Clock 
 Clock 
 Clock 
 Clock 
 Clock 
 Clock 
 Clock 
 Clock 
 Clock 
 Clock 
 Clock 
 Clock 
 Clock 
 Clock 
 Clock 
 Clock 
 Clock 
 Clock 
 Clock 
 Clock 
 Clock 
 Clock 
 Clock 
 Clock 
 Clock 
 Clock 
 Clock 
 Clock 
 Clock 
 Clock 
 Clock 
 Clock 
         */
        public static int keyguard_domestic_zone_name=0x7f050001;
        /**  On the keyguard screen, when pattern lock is disabled, only tell them to press menu to unlock.  This is shown in small font at the bottom. 
         */
        public static int keyguard_instructions_when_pattern_disabled=0x7f05005c;
        public static int keyguard_internal_call=0x7f050036;
        /**  When the lock screen is showing and the battery is low, warn user to plug
         in the phone soon. 
         */
        public static int keyguard_low_battery=0x7f05005b;
        /**  Shown to ask the user to insert a SIM card. 
         */
        public static int keyguard_missing_sim_instructions=0x7f050060;
        /**  Shown to ask the user to insert a SIM card when sim is missing or not readable. 
         */
        public static int keyguard_missing_sim_instructions_long=0x7f050061;
        /**  Shown when there is no SIM card. 
         */
        public static int keyguard_missing_sim_message=0x7f05005f;
        /**  Shown when there is no SIM card. 
         */
        public static int keyguard_missing_sim_message_short=0x7f05005e;
        /**  When the user inserts a sim card from an unsupported network, it becomes network locked 
         */
        public static int keyguard_network_locked_message=0x7f05005d;
        public static int keyguard_not_set=0x7f050037;
        public static int keyguard_password_Confirm_pin_code=0x7f050015;
        public static int keyguard_password_enter_new_pin_code=0x7f050014;
        /**  Instructions telling the user to enter their text password to unlock the keyguard.
         Displayed in one line in a large font.  
         */
        public static int keyguard_password_enter_password_code=0x7f050056;
        /**  Instructions telling the user to enter their SIM PIN to unlock the keyguard.
         Displayed in one line in a large font.  
         */
        public static int keyguard_password_enter_pin_code=0x7f050051;
        /**  Instructions telling the user to enter their PIN password to unlock the keyguard.
         Displayed in one line in a large font.  
         */
        public static int keyguard_password_enter_pin_password_code=0x7f050057;
        /**  Prompt to enter New SIM PIN in Edit Text Box in unlock screen 
         */
        public static int keyguard_password_enter_pin_prompt=0x7f050054;
        /**  Instructions telling the user to enter their SIM PUK to unlock the keyguard.
         Displayed in one line in a large font.  
         */
        public static int keyguard_password_enter_puk_code=0x7f050052;
        /**  Prompt to enter SIM PUK in Edit Text Box in unlock screen 
         */
        public static int keyguard_password_enter_puk_prompt=0x7f050053;
        /**  Telephony 
 Telephony 
 Telephony 
 Telephony 
 Telephony 
 Telephony 
 Telephony 
 Telephony 
 Telephony 
 Telephony 
 Telephony 
 Telephony 
 Telephony 
 Telephony 
 Telephony 
 Telephony 
 Telephony 
 Telephony 
 Telephony 
 Telephony 
 Telephony 
 Telephony 
 Telephony 
 Telephony 
 Telephony 
 Telephony 
 Telephony 
 Telephony 
 Telephony 
 Telephony 
 Telephony 
 Telephony 
 Telephony 
 Telephony 
 Telephony 
 Telephony 
 Telephony 
 Telephony 
 Telephony 
 Telephony 
 Telephony 
 Telephony 
 Telephony 
         */
        public static int keyguard_password_entering_puk_code=0x7f050011;
        /**  Displayed as hint in passwordEntry EditText on PasswordUnlockScreen [CHAR LIMIT=30]
         */
        public static int keyguard_password_entry_touch_hint=0x7f050055;
        /**  Instructions telling the user that they entered the wrong pin while trying
         to unlock the keyguard.  Displayed in one line in a large font.  
         */
        public static int keyguard_password_wrong_pin_code=0x7f050058;
        public static int keyguard_password_wrong_puk_code=0x7f050012;
        /**  Shown to inform the user to SIM card is permanently disabled. 
         */
        public static int keyguard_permanent_disabled_sim_instructions=0x7f050063;
        /**  Shown when SIM card is permanently disabled. 
         */
        public static int keyguard_permanent_disabled_sim_message_short=0x7f050062;
        /**  When the lock screen is showing and the phone plugged in, and the battery
         is not fully charged, say that it's charging.  
         */
        public static int keyguard_plugged_in=0x7f05005a;
        /**  Process name for keyguard [DO NOT TRANSLATE] 
         */
        public static int keyguard_process_name=0x7f050000;
        public static int keyguard_sim_auto=0x7f050035;
        /**  Shown to tell the user that their SIM is locked and they must unlock it. 
         */
        public static int keyguard_sim_locked_message=0x7f050064;
        /**  When the user enters a wrong sim pin too many times, it becomes PUK locked (Pin Unlock Kode) 
         */
        public static int keyguard_sim_puk_locked_message=0x7f050065;
        /**  For the unlock screen, When the user enters a sim unlock code, it takes a little while to check
         whether it is valid, and to unlock the sim if it is valid.  we display a
         progress dialog in the meantime.  this is the emssage. 
         */
        public static int keyguard_sim_unlock_progress_dialog_message=0x7f050066;
        public static int keyguard_sms=0x7f050024;
        public static int keyguard_video_call=0x7f05002e;
        public static int keyguard_voice_call=0x7f050023;
        /**  Time format strings for fall-back clock widget 
         */
        public static int keyguard_widget_12_hours_format=0x7f050067;
        /**  Time format strings for fall-back clock widget 
         */
        public static int keyguard_widget_24_hours_format=0x7f050068;
        public static int keyguard_wrong_code_input=0x7f050027;
        public static int kg_detecting_simcard=0x7f050045;
        /**  Label shown on emergency call button in keyguard 
         */
        public static int kg_emergency_call_label=0x7f050043;
        /**  Message shown when the user needs to confirm the PIN they just entered in the PUK screen 
         */
        public static int kg_enter_confirm_pin_hint=0x7f050081;
        /**  Message shown when user is almost at the limit of password attempts where the profile will be removed. [CHAR LIMIT=none] 
         */
        public static int kg_failed_attempts_almost_at_erase_profile=0x7f05008f;
        /**  Message shown when user is almost at the limit of password attempts where the user will be removed. [CHAR LIMIT=none] 
         */
        public static int kg_failed_attempts_almost_at_erase_user=0x7f05008d;
        /**  Message shown in dialog when user is almost at the limit where they will be
    locked out and may have to enter an alternate username/password to unlock the phone 
         */
        public static int kg_failed_attempts_almost_at_login=0x7f050091;
        /**  Message shown when user is almost at the limit of password attempts where the device will be wiped. [CHAR LIMIT=none] 
         */
        public static int kg_failed_attempts_almost_at_wipe=0x7f05008b;
        /**  Message shown in dialog when user has exceeded the maximum attempts and the profile will be removed. [CHAR LIMIT=none] 
         */
        public static int kg_failed_attempts_now_erasing_profile=0x7f050090;
        /**  Message shown in dialog when user has exceeded the maximum attempts and the user will be removed. [CHAR LIMIT=none] 
         */
        public static int kg_failed_attempts_now_erasing_user=0x7f05008e;
        /**  Message shown in dialog when user has exceeded the maximum attempts and the device will now be wiped [CHAR LIMIT=none] 
         */
        public static int kg_failed_attempts_now_wiping=0x7f05008c;
        /**  Message shown in pattern unlock after some number of unsuccessful attempts 
         */
        public static int kg_forgot_pattern_button_text=0x7f050074;
        /**  String shown in PUK screen when PIN codes don't match 
         */
        public static int kg_invalid_confirm_pin_hint=0x7f050086;
        /**  Message shown when the user enters an invalid PUK code 
         */
        public static int kg_invalid_puk=0x7f050085;
        /**  Message shown when the user enters an invalid SIM pin password in PUK screen 
         */
        public static int kg_invalid_sim_pin_hint=0x7f050083;
        /**  Message shown when the user enters an invalid PUK code in the PUK screen 
         */
        public static int kg_invalid_sim_puk_hint=0x7f050084;
        /**  Message shown when the user exceeds the maximum number of pattern attempts 
         */
        public static int kg_login_too_many_attempts=0x7f050087;
        public static int kg_new_simcard=0x7f050046;
        /**  Instructions for using the password unlock screen 
         */
        public static int kg_password_instructions=0x7f05007d;
        /**  Instructions telling the user that the operation to unlock the keyguard
         with SIM PIN failed. Displayed in one line in a large font.  
         */
        public static int kg_password_pin_failed=0x7f050094;
        /**  Instructions telling the user that the operation to unlock the keyguard
         with PUK failed. Displayed in one line in a large font.  
         */
        public static int kg_password_puk_failed=0x7f050095;
        /**  Instructions telling the user that they entered the wrong SIM PIN for the last time.
         Displayed in a dialog box.  
         */
        public static int kg_password_wrong_pin_code_pukked=0x7f050092;
        /**  Instructions telling the user that they have exhausted SIM PUK retries and the SIM is now unusable.
         Displayed in a dialog box.  
         */
        public static int kg_password_wrong_puk_code_dead=0x7f050093;
        /**  Instructions for using the pattern unlock screen 
         */
        public static int kg_pattern_instructions=0x7f050079;
        /**  Notification telling the user that the PIN1 they entered is valid 
         */
        public static int kg_pin_accepted=0x7f050096;
        /**  Instructions for using the PIN unlock screen 
         */
        public static int kg_pin_instructions=0x7f05007c;
        /**  An explanation text that the password needs to be entered since the device has just been restarted. [CHAR LIMIT=80] 
         */
        public static int kg_prompt_reason_restart_password=0x7f05009c;
        /**  An explanation text that the pattern needs to be solved since the device has just been restarted. [CHAR LIMIT=80] 
         */
        public static int kg_prompt_reason_restart_pattern=0x7f05009a;
        /**  An explanation text that the pin needs to be entered since the device has just been restarted. [CHAR LIMIT=80] 
         */
        public static int kg_prompt_reason_restart_pin=0x7f05009b;
        /**  An explanation text that the password needs to be entered since profiles have just been switched. [CHAR LIMIT=80] 
         */
        public static int kg_prompt_reason_switch_profiles_password=0x7f0500a2;
        /**  An explanation text that the pattern needs to be solved since profiles have just been switched. [CHAR LIMIT=80] 
         */
        public static int kg_prompt_reason_switch_profiles_pattern=0x7f0500a0;
        /**  An explanation text that the pin needs to be entered since profiles have just been switched. [CHAR LIMIT=80] 
         */
        public static int kg_prompt_reason_switch_profiles_pin=0x7f0500a1;
        /**  An explanation text that the password needs to be entered since the user hasn't used strong authentication since quite some time. [CHAR LIMIT=80] 
         */
        public static int kg_prompt_reason_timeout_password=0x7f05009f;
        /**  An explanation text that the pattern needs to be solved since the user hasn't used strong authentication since quite some time. [CHAR LIMIT=80] 
         */
        public static int kg_prompt_reason_timeout_pattern=0x7f05009d;
        /**  An explanation text that the pin needs to be entered since the user hasn't used strong authentication since quite some time. [CHAR LIMIT=80] 
         */
        public static int kg_prompt_reason_timeout_pin=0x7f05009e;
        /**  Hint shown in the PUK unlock screen PIN TextView 
         */
        public static int kg_puk_enter_pin_hint=0x7f050080;
        /**  Hint shown in the PUK screen that asks the user to enter the PUK code given to them by their provider 
         */
        public static int kg_puk_enter_puk_hint=0x7f05007e;
        /**  Hint shown when there are multiple SIMs in the device to ask the user to enter the PUK code given to them by their provider 
         */
        public static int kg_puk_enter_puk_hint_multi=0x7f05007f;
        /**  Instructions for using the SIM PIN unlock screen 
         */
        public static int kg_sim_pin_instructions=0x7f05007a;
        /**  Instructions for using the SIM PIN unlock screen when there's more than one SIM 
         */
        public static int kg_sim_pin_instructions_multi=0x7f05007b;
        /**  Message shown in dialog while the device is unlocking the SIM card 
         */
        public static int kg_sim_unlock_progress_dialog_message=0x7f050082;
        public static int kg_slot_id=0x7f050044;
        /**  Countdown message shown after too many failed unlock attempts 
         */
        public static int kg_too_many_failed_attempts_countdown=0x7f050078;
        /**  Message shown in dialog when max number of attempts are reached for password screen of keyguard 
         */
        public static int kg_too_many_failed_password_attempts_dialog_message=0x7f050089;
        public static int kg_too_many_failed_pattern_attempts_dialog_message=0x7f05008a;
        /**  Message shown in dialog when max number of attempts are reached for PIN screen of keyguard 
         */
        public static int kg_too_many_failed_pin_attempts_dialog_message=0x7f050088;
        /**  Message shown when user enters wrong password 
         */
        public static int kg_wrong_password=0x7f050076;
        /**  Message shown when user enters wrong pattern 
         */
        public static int kg_wrong_pattern=0x7f050075;
        /**  Message shown when user enters wrong PIN 
         */
        public static int kg_wrong_pin=0x7f050077;
        public static int lockscreen_missing_sim_dialog_message=0x7f05001c;
        /**  Misc 
 Misc 
 Misc 
 Misc 
 Misc 
 Misc 
 Misc 
 Misc 
 Misc 
 Misc 
 Misc 
 Misc 
 Misc 
 Misc 
 Misc 
 Misc 
 Misc 
 Misc 
 Misc 
 Misc 
 Misc 
 Misc 
 Misc 
 Misc 
 Misc 
 Misc 
 Misc 
 Misc 
 Misc 
 Misc 
 Misc 
 Misc 
 Misc 
 Misc 
 Misc 
 Misc 
 Misc 
 Misc 
 Misc 
 Misc 
         */
        public static int lockscreen_pattern_wrong=0x7f05002f;
        public static int lockscreen_sim_locked_message_short=0x7f050032;
        public static int network_searching=0x7f05002a;
        public static int never=0x7f050003;
        public static int new_simcard=0x7f05001b;
        /**  Alias used to reference framework "OK" string in keyguard.  
         */
        public static int ok=0x7f05004a;
        public static int ppl_prompt=0x7f050040;
        public static int retries_left=0x7f050017;
        public static int sd_accessing_swtich_user_message=0x7f050042;
        /**  Tablet 
 Tablet 
 Tablet 
 Tablet 
 Tablet 
 Tablet 
 Tablet 
 Tablet 
 Tablet 
 Tablet 
 Tablet 
 Tablet 
 Tablet 
 Tablet 
 Tablet 
 Tablet 
 Tablet 
 Tablet 
 Tablet 
 Tablet 
 Tablet 
 Tablet 
 Tablet 
 Tablet 
 Tablet 
 Tablet 
 Tablet 
 Tablet 
 Tablet 
 Tablet 
 Tablet 
 Tablet 
 Tablet 
 Tablet 
 Tablet 
 Tablet 
 Tablet 
 Tablet 
 Tablet 
 Tablet 
 Tablet 
 Tablet 
 Tablet 
         */
        public static int sd_accessing_swtich_user_title=0x7f050041;
        public static int searching_simcard=0x7f05002b;
        public static int sim_card_changed_dialog_title=0x7f05001d;
        public static int sim_card_removed=0x7f050020;
        public static int sim_card_swapped=0x7f050021;
        public static int sim_permanently_locked=0x7f050016;
        public static int simlock_entersimmelock=0x7f050019;
        public static int simlock_slot_locked_message=0x7f050018;
        public static int slot_id=0x7f05001a;
        /**  Alias used to reference framework "OK" string in keyguard.  
         */
        public static int system_ui_date_pattern=0x7f05004b;
        public static int voice_unlock_media_playing=0x7f05003c;
        public static int voice_unlock_noisy=0x7f05003a;
        public static int voice_unlock_password_wrong=0x7f050039;
        /**  VoiceUnlock 
 VoiceUnlock 
 VoiceUnlock 
 VoiceUnlock 
 VoiceUnlock 
 VoiceUnlock 
 VoiceUnlock 
 VoiceUnlock 
 VoiceUnlock 
 VoiceUnlock 
 VoiceUnlock 
 VoiceUnlock 
 VoiceUnlock 
 VoiceUnlock 
 VoiceUnlock 
 VoiceUnlock 
 VoiceUnlock 
 VoiceUnlock 
 VoiceUnlock 
 VoiceUnlock 
 VoiceUnlock 
 VoiceUnlock 
 VoiceUnlock 
 VoiceUnlock 
 VoiceUnlock 
 VoiceUnlock 
 VoiceUnlock 
 VoiceUnlock 
 VoiceUnlock 
 VoiceUnlock 
 VoiceUnlock 
 VoiceUnlock 
 VoiceUnlock 
 VoiceUnlock 
 VoiceUnlock 
 VoiceUnlock 
 VoiceUnlock 
 VoiceUnlock 
 VoiceUnlock 
 VoiceUnlock 
 VoiceUnlock 
 VoiceUnlock 
 VoiceUnlock 
         */
        public static int voice_unlock_service_error=0x7f050038;
        public static int voice_unlock_weak=0x7f05003b;
        public static int voiceui_comma=0x7f050008;
        public static int voiceui_control_poweroff_alarm=0x7f050007;
        public static int voiceui_notify_string=0x7f050006;
        public static int voiceui_or=0x7f05000b;
        public static int voiceui_quota_end=0x7f05000a;
        public static int voiceui_quota_start=0x7f050009;
        public static int voiceunlock_accessibility_voice_unlock=0x7f05003e;
        public static int voiceunlock_multiple_failures=0x7f05003d;
    }
    public static final class style {
        public static int BouncerSecurityContainer=0x7f08000b;
        /**  power off alrm end 
 Keyguard PIN dimsiss button styles 
         */
        public static int DismissPadKey=0x7f080005;
        public static int PasswordTheme=0x7f08000c;
        /**  Keyguard PIN pad styles 
         */
        public static int Widget_TextView_NumPadKey=0x7f080007;
        public static int Widget_TextView_NumPadKey_Klondike=0x7f080008;
        public static int big_bold=0x7f080003;
        /**  Clock 
         */
        public static int big_thin=0x7f080006;
        public static int header=0x7f080001;
        public static int header_not_caps=0x7f080002;
        public static int keyguard_presentation_theme=0x7f08000d;
        /**  power off alrm start
         */
        public static int label=0x7f080000;
        public static int widget_big_bold=0x7f080004;
        public static int widget_big_thin=0x7f08000a;
        /**  Built-in clock widget stuff 
         */
        public static int widget_label=0x7f080009;
    }
    public static final class styleable {
        /** Attributes that can be used with a CarrierText.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #CarrierText_allCaps com.android.keyguard:allCaps}</code></td><td></td></tr>
           </table>
           @see #CarrierText_allCaps
         */
        public static final int[] CarrierText = {
            0x7f010014
        };
        /**
          <p>This symbol is the offset where the {@link com.android.keyguard.R.attr#allCaps}
          attribute's value can be found in the {@link #CarrierText} array.


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name com.android.keyguard:allCaps
        */
        public static int CarrierText_allCaps = 0;
        /**  Show on Notification Keygaurd(for operator) start 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #ECCButtonAttr_locateAtNonSecureView com.android.keyguard:locateAtNonSecureView}</code></td><td></td></tr>
           </table>
           @see #ECCButtonAttr_locateAtNonSecureView
         */
        public static final int[] ECCButtonAttr = {
            0x7f010000
        };
        /**
          <p>This symbol is the offset where the {@link com.android.keyguard.R.attr#locateAtNonSecureView}
          attribute's value can be found in the {@link #ECCButtonAttr} array.


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name com.android.keyguard:locateAtNonSecureView
        */
        public static int ECCButtonAttr_locateAtNonSecureView = 0;
        /**   Show on Notification Keygaurd(for operator) end 
  Power off alarm start 
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #GlowPadView_allowScaling com.android.keyguard:allowScaling}</code></td><td> Determine whether the glow pad is allowed to scale to fit the bounds indicated
            by its parent.</td></tr>
           <tr><td><code>{@link #GlowPadView_alwaysTrackFinger com.android.keyguard:alwaysTrackFinger}</code></td><td> Used when the handle shouldn't wait to be hit before following the finger </td></tr>
           <tr><td><code>{@link #GlowPadView_android_gravity android:gravity}</code></td><td></td></tr>
           <tr><td><code>{@link #GlowPadView_directionDescriptions com.android.keyguard:directionDescriptions}</code></td><td> Reference to an array resource that be used to announce the directions with targets around the circle.</td></tr>
           <tr><td><code>{@link #GlowPadView_feedbackCount com.android.keyguard:feedbackCount}</code></td><td> Number of waves/chevrons to show in animation.</td></tr>
           <tr><td><code>{@link #GlowPadView_glowRadius com.android.keyguard:glowRadius}</code></td><td> Size of target radius.</td></tr>
           <tr><td><code>{@link #GlowPadView_handleDrawable com.android.keyguard:handleDrawable}</code></td><td> Sets a drawable as the center.</td></tr>
           <tr><td><code>{@link #GlowPadView_innerRadius com.android.keyguard:innerRadius}</code></td><td> Inner radius of glow area.</td></tr>
           <tr><td><code>{@link #GlowPadView_outerRadius com.android.keyguard:outerRadius}</code></td><td> Outer radius of glow area.</td></tr>
           <tr><td><code>{@link #GlowPadView_outerRingDrawable com.android.keyguard:outerRingDrawable}</code></td><td> Drawable to use for wave ripple animation.</td></tr>
           <tr><td><code>{@link #GlowPadView_pointDrawable com.android.keyguard:pointDrawable}</code></td><td> Drawble used for drawing points </td></tr>
           <tr><td><code>{@link #GlowPadView_snapMargin com.android.keyguard:snapMargin}</code></td><td> How close we need to be before snapping to a target.</td></tr>
           <tr><td><code>{@link #GlowPadView_targetDescriptions com.android.keyguard:targetDescriptions}</code></td><td> Reference to an array resource that be used as description for the targets around the circle.</td></tr>
           <tr><td><code>{@link #GlowPadView_targetDrawables com.android.keyguard:targetDrawables}</code></td><td> Reference to an array resource that be shown as targets around a circle.</td></tr>
           <tr><td><code>{@link #GlowPadView_vibrationDuration com.android.keyguard:vibrationDuration}</code></td><td> Tactile feedback duration for actions.</td></tr>
           </table>
           @see #GlowPadView_allowScaling
           @see #GlowPadView_alwaysTrackFinger
           @see #GlowPadView_android_gravity
           @see #GlowPadView_directionDescriptions
           @see #GlowPadView_feedbackCount
           @see #GlowPadView_glowRadius
           @see #GlowPadView_handleDrawable
           @see #GlowPadView_innerRadius
           @see #GlowPadView_outerRadius
           @see #GlowPadView_outerRingDrawable
           @see #GlowPadView_pointDrawable
           @see #GlowPadView_snapMargin
           @see #GlowPadView_targetDescriptions
           @see #GlowPadView_targetDrawables
           @see #GlowPadView_vibrationDuration
         */
        public static final int[] GlowPadView = {
            0x010100af, 0x7f010001, 0x7f010002, 0x7f010003,
            0x7f010004, 0x7f010005, 0x7f010006, 0x7f010007,
            0x7f010008, 0x7f010009, 0x7f01000a, 0x7f01000b,
            0x7f01000c, 0x7f01000d, 0x7f01000e
        };
        /**
          <p>
          @attr description
           Determine whether the glow pad is allowed to scale to fit the bounds indicated
            by its parent. If this is set to false, no scaling will occur. If this is set to true
            scaling will occur to fit for any axis in which gravity is set to center. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name com.android.keyguard:allowScaling
        */
        public static int GlowPadView_allowScaling = 14;
        /**
          <p>
          @attr description
           Used when the handle shouldn't wait to be hit before following the finger 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name com.android.keyguard:alwaysTrackFinger
        */
        public static int GlowPadView_alwaysTrackFinger = 13;
        /**
          <p>This symbol is the offset where the {@link android.R.attr#gravity}
          attribute's value can be found in the {@link #GlowPadView} array.
          @attr name android:gravity
        */
        public static int GlowPadView_android_gravity = 0;
        /**
          <p>
          @attr description
           Reference to an array resource that be used to announce the directions with targets around the circle. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This is a private symbol.
          @attr name com.android.keyguard:directionDescriptions
        */
        public static int GlowPadView_directionDescriptions = 3;
        /**
          <p>
          @attr description
           Number of waves/chevrons to show in animation. 


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name com.android.keyguard:feedbackCount
        */
        public static int GlowPadView_feedbackCount = 12;
        /**
          <p>
          @attr description
           Size of target radius. Points within this distance of target center is a "hit". 

        <attr name="hitRadius" format="dimension"/>
        
 Radius of glow under finger. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name com.android.keyguard:glowRadius
        */
        public static int GlowPadView_glowRadius = 9;
        /**
          <p>
          @attr description
           Sets a drawable as the center. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This is a private symbol.
          @attr name com.android.keyguard:handleDrawable
        */
        public static int GlowPadView_handleDrawable = 4;
        /**
          <p>
          @attr description
           Inner radius of glow area. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name com.android.keyguard:innerRadius
        */
        public static int GlowPadView_innerRadius = 7;
        /**
          <p>
          @attr description
           Outer radius of glow area. Target icons will be drawn on this circle. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name com.android.keyguard:outerRadius
        */
        public static int GlowPadView_outerRadius = 8;
        /**
          <p>
          @attr description
           Drawable to use for wave ripple animation. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This is a private symbol.
          @attr name com.android.keyguard:outerRingDrawable
        */
        public static int GlowPadView_outerRingDrawable = 5;
        /**
          <p>
          @attr description
           Drawble used for drawing points 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This is a private symbol.
          @attr name com.android.keyguard:pointDrawable
        */
        public static int GlowPadView_pointDrawable = 6;
        /**
          <p>
          @attr description
           How close we need to be before snapping to a target. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name com.android.keyguard:snapMargin
        */
        public static int GlowPadView_snapMargin = 11;
        /**
          <p>
          @attr description
           Reference to an array resource that be used as description for the targets around the circle. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This is a private symbol.
          @attr name com.android.keyguard:targetDescriptions
        */
        public static int GlowPadView_targetDescriptions = 2;
        /**
          <p>
          @attr description
           Reference to an array resource that be shown as targets around a circle. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This is a private symbol.
          @attr name com.android.keyguard:targetDrawables
        */
        public static int GlowPadView_targetDrawables = 1;
        /**
          <p>
          @attr description
           Tactile feedback duration for actions. Set to '0' for no vibration. 


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name com.android.keyguard:vibrationDuration
        */
        public static int GlowPadView_vibrationDuration = 10;
        /** Attributes that can be used with a KeyguardSecurityViewFlipper_Layout.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #KeyguardSecurityViewFlipper_Layout_layout_maxHeight com.android.keyguard:layout_maxHeight}</code></td><td></td></tr>
           <tr><td><code>{@link #KeyguardSecurityViewFlipper_Layout_layout_maxWidth com.android.keyguard:layout_maxWidth}</code></td><td></td></tr>
           </table>
           @see #KeyguardSecurityViewFlipper_Layout_layout_maxHeight
           @see #KeyguardSecurityViewFlipper_Layout_layout_maxWidth
         */
        public static final int[] KeyguardSecurityViewFlipper_Layout = {
            0x7f01000f, 0x7f010010
        };
        /**
          <p>This symbol is the offset where the {@link com.android.keyguard.R.attr#layout_maxHeight}
          attribute's value can be found in the {@link #KeyguardSecurityViewFlipper_Layout} array.


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name com.android.keyguard:layout_maxHeight
        */
        public static int KeyguardSecurityViewFlipper_Layout_layout_maxHeight = 1;
        /**
          <p>This symbol is the offset where the {@link com.android.keyguard.R.attr#layout_maxWidth}
          attribute's value can be found in the {@link #KeyguardSecurityViewFlipper_Layout} array.


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name com.android.keyguard:layout_maxWidth
        */
        public static int KeyguardSecurityViewFlipper_Layout_layout_maxWidth = 0;
        /** Attributes that can be used with a NumPadKey.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #NumPadKey_digit com.android.keyguard:digit}</code></td><td></td></tr>
           <tr><td><code>{@link #NumPadKey_textView com.android.keyguard:textView}</code></td><td></td></tr>
           </table>
           @see #NumPadKey_digit
           @see #NumPadKey_textView
         */
        public static final int[] NumPadKey = {
            0x7f010011, 0x7f010012
        };
        /**
          <p>This symbol is the offset where the {@link com.android.keyguard.R.attr#digit}
          attribute's value can be found in the {@link #NumPadKey} array.


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name com.android.keyguard:digit
        */
        public static int NumPadKey_digit = 0;
        /**
          <p>This symbol is the offset where the {@link com.android.keyguard.R.attr#textView}
          attribute's value can be found in the {@link #NumPadKey} array.


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          @attr name com.android.keyguard:textView
        */
        public static int NumPadKey_textView = 1;
        /** Attributes that can be used with a PasswordTextView.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #PasswordTextView_scaledTextSize com.android.keyguard:scaledTextSize}</code></td><td></td></tr>
           </table>
           @see #PasswordTextView_scaledTextSize
         */
        public static final int[] PasswordTextView = {
            0x7f010013
        };
        /**
          <p>This symbol is the offset where the {@link com.android.keyguard.R.attr#scaledTextSize}
          attribute's value can be found in the {@link #PasswordTextView} array.


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name com.android.keyguard:scaledTextSize
        */
        public static int PasswordTextView_scaledTextSize = 0;
    };
}
