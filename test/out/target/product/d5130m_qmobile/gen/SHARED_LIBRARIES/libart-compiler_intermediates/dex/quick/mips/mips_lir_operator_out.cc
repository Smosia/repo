#include <iostream>

#include "dex/quick/mips/mips_lir.h"

// This was automatically generated by art/tools/generate-operator-out.py --- do not edit!
namespace art {
std::ostream& operator<<(std::ostream& os, const MipsEncodingKind& rhs) {
  switch (rhs) {
    case kFmtUnused: os << "FmtUnused"; break;
    case kFmtBitBlt: os << "FmtBitBlt"; break;
    case kFmtDfp: os << "FmtDfp"; break;
    case kFmtSfp: os << "FmtSfp"; break;
    case kFmtBlt5_2: os << "FmtBlt5_2"; break;
    default: os << "MipsEncodingKind[" << static_cast<int>(rhs) << "]"; break;
  }
  return os;
}
}  // namespace art

// This was automatically generated by art/tools/generate-operator-out.py --- do not edit!
namespace art {
std::ostream& operator<<(std::ostream& os, const MipsShiftEncodings& rhs) {
  switch (rhs) {
    case kMipsLsl: os << "MipsLsl"; break;
    case kMipsLsr: os << "MipsLsr"; break;
    case kMipsAsr: os << "MipsAsr"; break;
    case kMipsRor: os << "MipsRor"; break;
    default: os << "MipsShiftEncodings[" << static_cast<int>(rhs) << "]"; break;
  }
  return os;
}
}  // namespace art

// This was automatically generated by art/tools/generate-operator-out.py --- do not edit!
namespace art {
std::ostream& operator<<(std::ostream& os, const MipsOpCode& rhs) {
  switch (rhs) {
    case kMipsFirst: os << "MipsFirst"; break;
    case kMipsAddiu: os << "MipsAddiu"; break;
    case kMipsAddu: os << "MipsAddu"; break;
    case kMipsAnd: os << "MipsAnd"; break;
    case kMipsAndi: os << "MipsAndi"; break;
    case kMipsB: os << "MipsB"; break;
    case kMipsBal: os << "MipsBal"; break;
    case kMipsBeq: os << "MipsBeq"; break;
    case kMipsBeqz: os << "MipsBeqz"; break;
    case kMipsBgez: os << "MipsBgez"; break;
    case kMipsBgtz: os << "MipsBgtz"; break;
    case kMipsBlez: os << "MipsBlez"; break;
    case kMipsBltz: os << "MipsBltz"; break;
    case kMipsBnez: os << "MipsBnez"; break;
    case kMipsBne: os << "MipsBne"; break;
    case kMipsExt: os << "MipsExt"; break;
    case kMipsFaddd: os << "MipsFaddd"; break;
    case kMipsFadds: os << "MipsFadds"; break;
    case kMipsFsubd: os << "MipsFsubd"; break;
    case kMipsFsubs: os << "MipsFsubs"; break;
    case kMipsFdivd: os << "MipsFdivd"; break;
    case kMipsFdivs: os << "MipsFdivs"; break;
    case kMipsFmuld: os << "MipsFmuld"; break;
    case kMipsFmuls: os << "MipsFmuls"; break;
    case kMipsFcvtsd: os << "MipsFcvtsd"; break;
    case kMipsFcvtsw: os << "MipsFcvtsw"; break;
    case kMipsFcvtds: os << "MipsFcvtds"; break;
    case kMipsFcvtdw: os << "MipsFcvtdw"; break;
    case kMipsFcvtwd: os << "MipsFcvtwd"; break;
    case kMipsFcvtws: os << "MipsFcvtws"; break;
    case kMipsFmovd: os << "MipsFmovd"; break;
    case kMipsFmovs: os << "MipsFmovs"; break;
    case kMipsFnegd: os << "MipsFnegd"; break;
    case kMipsFnegs: os << "MipsFnegs"; break;
    case kMipsFldc1: os << "MipsFldc1"; break;
    case kMipsFlwc1: os << "MipsFlwc1"; break;
    case kMipsFsdc1: os << "MipsFsdc1"; break;
    case kMipsFswc1: os << "MipsFswc1"; break;
    case kMipsJal: os << "MipsJal"; break;
    case kMipsJalr: os << "MipsJalr"; break;
    case kMipsJr: os << "MipsJr"; break;
    case kMipsLahi: os << "MipsLahi"; break;
    case kMipsLalo: os << "MipsLalo"; break;
    case kMipsLui: os << "MipsLui"; break;
    case kMipsLb: os << "MipsLb"; break;
    case kMipsLbu: os << "MipsLbu"; break;
    case kMipsLh: os << "MipsLh"; break;
    case kMipsLhu: os << "MipsLhu"; break;
    case kMipsLw: os << "MipsLw"; break;
    case kMipsMove: os << "MipsMove"; break;
    case kMipsMfc1: os << "MipsMfc1"; break;
    case kMipsMtc1: os << "MipsMtc1"; break;
    case kMipsMfhc1: os << "MipsMfhc1"; break;
    case kMipsMthc1: os << "MipsMthc1"; break;
    case kMipsNop: os << "MipsNop"; break;
    case kMipsNor: os << "MipsNor"; break;
    case kMipsOr: os << "MipsOr"; break;
    case kMipsOri: os << "MipsOri"; break;
    case kMipsPref: os << "MipsPref"; break;
    case kMipsSb: os << "MipsSb"; break;
    case kMipsSeb: os << "MipsSeb"; break;
    case kMipsSeh: os << "MipsSeh"; break;
    case kMipsSh: os << "MipsSh"; break;
    case kMipsSll: os << "MipsSll"; break;
    case kMipsSllv: os << "MipsSllv"; break;
    case kMipsSlt: os << "MipsSlt"; break;
    case kMipsSlti: os << "MipsSlti"; break;
    case kMipsSltu: os << "MipsSltu"; break;
    case kMipsSra: os << "MipsSra"; break;
    case kMipsSrav: os << "MipsSrav"; break;
    case kMipsSrl: os << "MipsSrl"; break;
    case kMipsSrlv: os << "MipsSrlv"; break;
    case kMipsSubu: os << "MipsSubu"; break;
    case kMipsSw: os << "MipsSw"; break;
    case kMipsSync: os << "MipsSync"; break;
    case kMipsXor: os << "MipsXor"; break;
    case kMipsXori: os << "MipsXori"; break;
    case kMipsR2Div: os << "MipsR2Div"; break;
    case kMipsR2Mul: os << "MipsR2Mul"; break;
    case kMipsR2Mfhi: os << "MipsR2Mfhi"; break;
    case kMipsR2Mflo: os << "MipsR2Mflo"; break;
    case kMipsR2Movz: os << "MipsR2Movz"; break;
    case kMipsR6Div: os << "MipsR6Div"; break;
    case kMipsR6Mod: os << "MipsR6Mod"; break;
    case kMipsR6Mul: os << "MipsR6Mul"; break;
    case kMips64Daddiu: os << "Mips64Daddiu"; break;
    case kMips64Daddu: os << "Mips64Daddu"; break;
    case kMips64Dahi: os << "Mips64Dahi"; break;
    case kMips64Dati: os << "Mips64Dati"; break;
    case kMips64Daui: os << "Mips64Daui"; break;
    case kMips64Ddiv: os << "Mips64Ddiv"; break;
    case kMips64Dmod: os << "Mips64Dmod"; break;
    case kMips64Dmul: os << "Mips64Dmul"; break;
    case kMips64Dmfc1: os << "Mips64Dmfc1"; break;
    case kMips64Dmtc1: os << "Mips64Dmtc1"; break;
    case kMips64Drotr32: os << "Mips64Drotr32"; break;
    case kMips64Dsll: os << "Mips64Dsll"; break;
    case kMips64Dsll32: os << "Mips64Dsll32"; break;
    case kMips64Dsrl: os << "Mips64Dsrl"; break;
    case kMips64Dsrl32: os << "Mips64Dsrl32"; break;
    case kMips64Dsra: os << "Mips64Dsra"; break;
    case kMips64Dsra32: os << "Mips64Dsra32"; break;
    case kMips64Dsllv: os << "Mips64Dsllv"; break;
    case kMips64Dsrlv: os << "Mips64Dsrlv"; break;
    case kMips64Dsrav: os << "Mips64Dsrav"; break;
    case kMips64Dsubu: os << "Mips64Dsubu"; break;
    case kMips64Ld: os << "Mips64Ld"; break;
    case kMips64Lwu: os << "Mips64Lwu"; break;
    case kMips64Sd: os << "Mips64Sd"; break;
    case kMipsDelta: os << "MipsDelta"; break;
    case kMipsDeltaHi: os << "MipsDeltaHi"; break;
    case kMipsDeltaLo: os << "MipsDeltaLo"; break;
    case kMipsCurrPC: os << "MipsCurrPC"; break;
    case kMipsUndefined: os << "MipsUndefined"; break;
    case kMipsLast: os << "MipsLast"; break;
    default: os << "MipsOpCode[" << static_cast<int>(rhs) << "]"; break;
  }
  return os;
}
}  // namespace art

// This was automatically generated by art/tools/generate-operator-out.py --- do not edit!
namespace art {
std::ostream& operator<<(std::ostream& os, const MipsResourceEncodingPos& rhs) {
  switch (rhs) {
    case kMipsGPReg0: os << "MipsGPReg0"; break;
    case kMipsRegSP: os << "MipsRegSP"; break;
    case kMipsRegLR: os << "MipsRegLR"; break;
    case kMipsFPReg0: os << "MipsFPReg0"; break;
    case kMipsFPRegEnd: os << "MipsFPRegEnd"; break;
    case kMipsRegLO: os << "MipsRegLO"; break;
    case kMipsRegPC: os << "MipsRegPC"; break;
    case kMipsRegEnd: os << "MipsRegEnd"; break;
    case kMips64FPRegEnd: os << "Mips64FPRegEnd"; break;
    case kMips64RegEnd: os << "Mips64RegEnd"; break;
    default: os << "MipsResourceEncodingPos[" << static_cast<int>(rhs) << "]"; break;
  }
  return os;
}
}  // namespace art

