#include <iostream>

#include "instrumentation.h"

// This was automatically generated by art/tools/generate-operator-out.py --- do not edit!
namespace art {
namespace instrumentation {
std::ostream& operator<<(std::ostream& os, const InterpreterHandlerTable& rhs) {
  switch (rhs) {
    case kMainHandlerTable: os << "MainHandlerTable"; break;
    case kAlternativeHandlerTable: os << "AlternativeHandlerTable"; break;
    case kNumHandlerTables: os << "NumHandlerTables"; break;
    default: os << "InterpreterHandlerTable[" << static_cast<int>(rhs) << "]"; break;
  }
  return os;
}
}  // namespace instrumentation
}  // namespace art

// This was automatically generated by art/tools/generate-operator-out.py --- do not edit!
namespace art {
namespace instrumentation {
std::ostream& operator<<(std::ostream& os, const Instrumentation::InstrumentationLevel& rhs) {
  switch (rhs) {
    case Instrumentation::InstrumentationLevel::kInstrumentNothing: os << "InstrumentNothing"; break;
    case Instrumentation::InstrumentationLevel::kInstrumentWithInstrumentationStubs: os << "InstrumentWithInstrumentationStubs"; break;
    case Instrumentation::InstrumentationLevel::kInstrumentWithInterpreter: os << "InstrumentWithInterpreter"; break;
  }
  return os;
}
}  // namespace instrumentation
}  // namespace art

// This was automatically generated by art/tools/generate-operator-out.py --- do not edit!
namespace art {
namespace instrumentation {
std::ostream& operator<<(std::ostream& os, const Instrumentation::InstrumentationEvent& rhs) {
  switch (rhs) {
    case Instrumentation::kMethodEntered: os << "MethodEntered"; break;
    case Instrumentation::kMethodExited: os << "MethodExited"; break;
    case Instrumentation::kMethodUnwind: os << "MethodUnwind"; break;
    case Instrumentation::kDexPcMoved: os << "DexPcMoved"; break;
    case Instrumentation::kFieldRead: os << "FieldRead"; break;
    case Instrumentation::kFieldWritten: os << "FieldWritten"; break;
    case Instrumentation::kExceptionCaught: os << "ExceptionCaught"; break;
    case Instrumentation::kBackwardBranch: os << "BackwardBranch"; break;
    default: os << "Instrumentation::InstrumentationEvent[" << static_cast<int>(rhs) << "]"; break;
  }
  return os;
}
}  // namespace instrumentation
}  // namespace art

