#include <iostream>

#include "optimizing/locations.h"

// This was automatically generated by art/tools/generate-operator-out.py --- do not edit!
namespace art {
std::ostream& operator<<(std::ostream& os, const Location::OutputOverlap& rhs) {
  switch (rhs) {
    case Location::kOutputOverlap: os << "OutputOverlap"; break;
    case Location::kNoOutputOverlap: os << "NoOutputOverlap"; break;
    default: os << "Location::OutputOverlap[" << static_cast<int>(rhs) << "]"; break;
  }
  return os;
}
}  // namespace art

// This was automatically generated by art/tools/generate-operator-out.py --- do not edit!
namespace art {
std::ostream& operator<<(std::ostream& os, const Location::Kind& rhs) {
  switch (rhs) {
    case Location::kInvalid: os << "Invalid"; break;
    case Location::kConstant: os << "Constant"; break;
    case Location::kStackSlot: os << "StackSlot"; break;
    case Location::kDoubleStackSlot: os << "DoubleStackSlot"; break;
    case Location::kRegister: os << "Register"; break;
    case Location::kDoNotUse5: os << "DoNotUse5"; break;
    case Location::kFpuRegister: os << "FpuRegister"; break;
    case Location::kRegisterPair: os << "RegisterPair"; break;
    case Location::kFpuRegisterPair: os << "FpuRegisterPair"; break;
    case Location::kDoNotUse9: os << "DoNotUse9"; break;
    case Location::kUnallocated: os << "Unallocated"; break;
    default: os << "Location::Kind[" << static_cast<int>(rhs) << "]"; break;
  }
  return os;
}
}  // namespace art

// This was automatically generated by art/tools/generate-operator-out.py --- do not edit!
namespace art {
std::ostream& operator<<(std::ostream& os, const Location::Policy& rhs) {
  switch (rhs) {
    case Location::kAny: os << "Any"; break;
    case Location::kRequiresRegister: os << "RequiresRegister"; break;
    case Location::kRequiresFpuRegister: os << "RequiresFpuRegister"; break;
    case Location::kSameAsFirstInput: os << "SameAsFirstInput"; break;
    default: os << "Location::Policy[" << static_cast<int>(rhs) << "]"; break;
  }
  return os;
}
}  // namespace art

// This was automatically generated by art/tools/generate-operator-out.py --- do not edit!
namespace art {
std::ostream& operator<<(std::ostream& os, const LocationSummary::CallKind& rhs) {
  switch (rhs) {
    case LocationSummary::kNoCall: os << "NoCall"; break;
    case LocationSummary::kCallOnSlowPath: os << "CallOnSlowPath"; break;
    case LocationSummary::kCall: os << "Call"; break;
    default: os << "LocationSummary::CallKind[" << static_cast<int>(rhs) << "]"; break;
  }
  return os;
}
}  // namespace art

